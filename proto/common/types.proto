syntax = "proto3";

package yao.common;

option go_package = "github.com/eggybyte/yao-verse/gen/proto/common;common";

import "google/protobuf/timestamp.proto";

// Transaction represents a blockchain transaction
message Transaction {
  string hash = 1;                    // Transaction hash (0x-prefixed hex)
  uint64 nonce = 2;                   // Account nonce
  string block_hash = 3;              // Block hash containing this transaction
  uint64 block_number = 4;            // Block number containing this transaction
  uint32 transaction_index = 5;       // Transaction index in block
  string from = 6;                    // Sender address (0x-prefixed hex)
  string to = 7;                      // Recipient address (0x-prefixed hex, empty for contract creation)
  string value = 8;                   // Transfer value in wei (decimal string)
  uint64 gas = 9;                     // Gas limit
  string gas_price = 10;              // Gas price in wei (decimal string)
  string max_fee_per_gas = 11;        // EIP-1559 max fee per gas
  string max_priority_fee_per_gas = 12; // EIP-1559 max priority fee per gas
  bytes data = 13;                    // Transaction data/input
  uint32 v = 14;                      // ECDSA recovery id
  string r = 15;                      // ECDSA signature r (0x-prefixed hex)
  string s = 16;                      // ECDSA signature s (0x-prefixed hex)
  uint32 type = 17;                   // Transaction type (0: legacy, 1: EIP-2930, 2: EIP-1559)
  repeated AccessListEntry access_list = 18; // EIP-2930 access list
}

// AccessListEntry for EIP-2930 transactions
message AccessListEntry {
  string address = 1;                 // Contract address
  repeated string storage_keys = 2;   // Storage keys
}

// Block represents a blockchain block
message Block {
  string hash = 1;                    // Block hash (0x-prefixed hex)
  uint64 number = 2;                  // Block number
  string parent_hash = 3;             // Parent block hash
  string nonce = 4;                   // Block nonce (proof of work)
  string sha3_uncles = 5;             // SHA3 of uncles data
  string logs_bloom = 6;              // Logs bloom filter
  string transactions_root = 7;       // Root of transaction trie
  string state_root = 8;              // Root of state trie  
  string receipts_root = 9;           // Root of receipts trie
  string miner = 10;                  // Miner address
  string difficulty = 11;             // Block difficulty (decimal string)
  string total_difficulty = 12;       // Total difficulty (decimal string)
  string extra_data = 13;             // Extra data (0x-prefixed hex)
  uint64 size = 14;                   // Block size in bytes
  uint64 gas_limit = 15;              // Gas limit
  uint64 gas_used = 16;               // Gas used
  google.protobuf.Timestamp timestamp = 17; // Block timestamp
  repeated Transaction transactions = 18; // Block transactions (full objects)
  repeated string transaction_hashes = 19; // Block transactions (only hashes)
  repeated string uncles = 20;        // Uncle block hashes
  string base_fee_per_gas = 21;       // EIP-1559 base fee per gas
}

// TransactionReceipt represents a transaction receipt
message TransactionReceipt {
  string transaction_hash = 1;        // Transaction hash
  uint32 transaction_index = 2;       // Transaction index in block
  string block_hash = 3;              // Block hash
  uint64 block_number = 4;            // Block number
  string from = 5;                    // Sender address
  string to = 6;                      // Recipient address (empty for contract creation)
  uint64 cumulative_gas_used = 7;     // Cumulative gas used in block
  uint64 gas_used = 8;                // Gas used by this transaction
  string contract_address = 9;        // Contract address (if created)
  repeated Log logs = 10;             // Event logs
  string logs_bloom = 11;             // Logs bloom filter
  uint32 status = 12;                 // Transaction status (1: success, 0: failure)
  string effective_gas_price = 13;    // Effective gas price
  uint32 type = 14;                   // Transaction type
}

// Log represents an event log
message Log {
  bool removed = 1;                   // True if log was removed due to chain reorg
  uint32 log_index = 2;               // Log index in block
  uint32 transaction_index = 3;       // Transaction index in block
  string transaction_hash = 4;        // Transaction hash
  string block_hash = 5;              // Block hash
  uint64 block_number = 6;            // Block number
  string address = 7;                 // Contract address
  bytes data = 8;                     // Log data
  repeated string topics = 9;         // Log topics (0x-prefixed hex)
}

// Account represents a blockchain account
message Account {
  string address = 1;                 // Account address (0x-prefixed hex)
  string balance = 2;                 // Account balance in wei (decimal string)
  uint64 nonce = 3;                   // Account nonce
  string code_hash = 4;               // Contract code hash (0x-prefixed hex)
  string storage_root = 5;            // Storage trie root (0x-prefixed hex)
  bytes code = 6;                     // Contract code (for contract accounts)
}

// StorageSlot represents a contract storage slot
message StorageSlot {
  string key = 1;                     // Storage key (0x-prefixed hex)
  string value = 2;                   // Storage value (0x-prefixed hex)
}

// ExecutionResult represents the result of block/transaction execution
message ExecutionResult {
  bool success = 1;                   // Execution success status
  string error = 2;                   // Error message if execution failed
  uint64 gas_used = 3;                // Gas consumed during execution
  bytes return_data = 4;              // Return data from execution
  repeated Log logs = 5;              // Event logs generated
  repeated StateChange state_changes = 6; // State changes made
}

// StateChange represents a change to the blockchain state
message StateChange {
  string address = 1;                 // Account address
  string field = 2;                   // Changed field (balance, nonce, code, storage)
  string old_value = 3;               // Previous value
  string new_value = 4;               // New value
  string storage_key = 5;             // Storage key (for storage changes)
}

// Health check status
message HealthStatus {
  enum Status {
    UNKNOWN = 0;
    HEALTHY = 1;
    UNHEALTHY = 2;
    DEGRADED = 3;
  }
  
  Status status = 1;
  string message = 2;
  google.protobuf.Timestamp timestamp = 3;
  map<string, string> details = 4;
}

// Generic request/response wrappers
message RequestMetadata {
  string request_id = 1;              // Unique request identifier
  google.protobuf.Timestamp timestamp = 2; // Request timestamp
  string client_version = 3;          // Client version
  map<string, string> headers = 4;    // Additional headers
}

message ResponseMetadata {
  string request_id = 1;              // Matching request identifier
  google.protobuf.Timestamp timestamp = 2; // Response timestamp
  string server_version = 3;          // Server version
  uint64 processing_time_ms = 4;      // Processing time in milliseconds
} 