syntax = "proto3";

package yao.vulcan;

option go_package = "github.com/eggybyte/yao-verse/gen/proto/vulcan;vulcan";

import "google/api/annotations.proto";
import "common/types.proto";

// ExecutionService provides blockchain execution capabilities
service ExecutionService {
  // ExecuteBlock executes a complete block and returns execution results
  rpc ExecuteBlock(ExecuteBlockRequest) returns (ExecuteBlockResponse) {
    option (google.api.http) = {
      post: "/api/v1/blocks/execute"
      body: "*"
    };
  }
  
  // ExecuteTransaction executes a single transaction
  rpc ExecuteTransaction(ExecuteTransactionRequest) returns (ExecuteTransactionResponse) {
    option (google.api.http) = {
      post: "/api/v1/transactions/execute"
      body: "*"
    };
  }
  
  // ValidateTransaction validates a transaction without executing it
  rpc ValidateTransaction(ValidateTransactionRequest) returns (ValidateTransactionResponse) {
    option (google.api.http) = {
      post: "/api/v1/transactions/validate"
      body: "*"
    };
  }
  
  // SimulateTransaction simulates transaction execution for gas estimation
  rpc SimulateTransaction(SimulateTransactionRequest) returns (SimulateTransactionResponse) {
    option (google.api.http) = {
      post: "/api/v1/transactions/simulate"
      body: "*"
    };
  }
  
  // GetExecutionStatus returns current execution engine status
  rpc GetExecutionStatus(GetExecutionStatusRequest) returns (GetExecutionStatusResponse) {
    option (google.api.http) = {
      get: "/api/v1/execution/status"
    };
  }
  
  // GetExecutionMetrics returns execution performance metrics
  rpc GetExecutionMetrics(GetExecutionMetricsRequest) returns (GetExecutionMetricsResponse) {
    option (google.api.http) = {
      get: "/api/v1/execution/metrics"
    };
  }
  
  // WatchExecution subscribes to execution events
  rpc WatchExecution(WatchExecutionRequest) returns (stream ExecutionEvent);
}

// ExecuteBlockRequest requests block execution
message ExecuteBlockRequest {
  yao.common.RequestMetadata metadata = 1;
  yao.common.Block block = 2;         // Block to execute
  ExecutionOptions options = 3;       // Execution options
}

// ExecutionOptions configures block execution behavior
message ExecutionOptions {
  bool validate_state_root = 1;       // Whether to validate state root
  bool generate_receipts = 2;         // Whether to generate transaction receipts
  bool trace_execution = 3;           // Whether to enable execution tracing
  uint64 gas_limit = 4;               // Block gas limit override
  bool parallel_execution = 5;        // Enable parallel transaction execution
}

// ExecuteBlockResponse returns block execution results
message ExecuteBlockResponse {
  yao.common.ResponseMetadata metadata = 1;
  BlockExecutionResult result = 2;    // Block execution result
}

// BlockExecutionResult contains results of block execution
message BlockExecutionResult {
  bool success = 1;                   // Whether block executed successfully
  string error = 2;                   // Error message if execution failed
  string state_root = 3;              // Resulting state root hash
  string receipts_root = 4;           // Transaction receipts root hash
  uint64 gas_used = 5;                // Total gas used in block
  repeated TransactionExecutionResult transaction_results = 6;
  repeated yao.common.Log logs = 7;   // All logs generated in block
  ExecutionStatistics stats = 8;      // Execution performance statistics
}

// TransactionExecutionResult contains results of individual transaction execution
message TransactionExecutionResult {
  string transaction_hash = 1;        // Transaction hash
  bool success = 2;                   // Whether transaction executed successfully
  string error = 3;                   // Error message if execution failed
  uint64 gas_used = 4;                // Gas used by this transaction
  bytes return_data = 5;              // Return data from execution
  repeated yao.common.Log logs = 6;   // Logs generated by this transaction
  repeated yao.common.StateChange state_changes = 7; // State changes made
  string contract_address = 8;        // Contract address (if contract creation)
  ExecutionTrace trace = 9;           // Execution trace (if requested)
}

// ExecutionTrace contains detailed execution trace information
message ExecutionTrace {
  repeated TraceStep steps = 1;       // Execution steps
  uint64 gas_used = 2;                // Total gas used
  bytes return_data = 3;              // Final return data
  string error = 4;                   // Error message if execution failed
}

// TraceStep represents a single step in execution trace
message TraceStep {
  uint64 step = 1;                    // Step number
  string opcode = 2;                  // EVM opcode
  uint64 gas_cost = 3;                // Gas cost of this step
  uint64 gas_remaining = 4;           // Gas remaining after this step
  repeated string stack = 5;          // EVM stack state (top to bottom)
  map<string, string> memory = 6;     // Memory changes in this step
  map<string, string> storage = 7;    // Storage changes in this step
  uint64 depth = 8;                   // Call depth
  string error = 9;                   // Error message if step failed
}

// ExecutionStatistics contains performance metrics for block execution
message ExecutionStatistics {
  uint64 execution_time_ms = 1;       // Total execution time in milliseconds
  uint64 state_reads = 2;             // Number of state reads
  uint64 state_writes = 3;            // Number of state writes
  uint64 cache_hits = 4;              // Number of cache hits
  uint64 cache_misses = 5;            // Number of cache misses
  uint64 parallel_transactions = 6;   // Number of transactions executed in parallel
  double cache_hit_ratio = 7;         // Cache hit ratio (0.0-1.0)
}

// ExecuteTransactionRequest requests single transaction execution
message ExecuteTransactionRequest {
  yao.common.RequestMetadata metadata = 1;
  yao.common.Transaction transaction = 2; // Transaction to execute
  ExecutionContext context = 3;       // Execution context
  ExecutionOptions options = 4;       // Execution options
}

// ExecutionContext provides context for transaction execution
message ExecutionContext {
  uint64 block_number = 1;            // Current block number
  string block_hash = 2;              // Current block hash
  uint64 timestamp = 3;               // Block timestamp
  uint64 gas_limit = 4;               // Block gas limit
  string coinbase = 5;                // Block coinbase address
  string difficulty = 6;              // Block difficulty
  string base_fee = 7;                // EIP-1559 base fee per gas
}

// ExecuteTransactionResponse returns transaction execution result
message ExecuteTransactionResponse {
  yao.common.ResponseMetadata metadata = 1;
  TransactionExecutionResult result = 2; // Transaction execution result
}

// ValidateTransactionRequest requests transaction validation
message ValidateTransactionRequest {
  yao.common.RequestMetadata metadata = 1;
  yao.common.Transaction transaction = 2; // Transaction to validate
  ExecutionContext context = 3;       // Validation context
}

// ValidateTransactionResponse returns validation result
message ValidateTransactionResponse {
  yao.common.ResponseMetadata metadata = 1;
  bool valid = 2;                     // Whether transaction is valid
  string error = 3;                   // Error message if invalid
  repeated ValidationError errors = 4; // Detailed validation errors
}

// ValidationError represents a specific validation error
message ValidationError {
  ValidationErrorType type = 1;       // Error type
  string message = 2;                 // Error message
  string field = 3;                   // Field that caused error
}

// ValidationErrorType represents different validation error types
enum ValidationErrorType {
  INVALID_SIGNATURE = 0;              // Invalid transaction signature
  INSUFFICIENT_FUNDS = 1;             // Insufficient account balance
  NONCE_TOO_LOW = 2;                  // Transaction nonce too low
  NONCE_TOO_HIGH = 3;                 // Transaction nonce too high
  GAS_LIMIT_EXCEEDED = 4;             // Gas limit exceeded
  INVALID_CHAIN_ID = 5;               // Invalid chain ID
  INVALID_FORMAT = 6;                 // Invalid transaction format
}

// SimulateTransactionRequest requests transaction simulation
message SimulateTransactionRequest {
  yao.common.RequestMetadata metadata = 1;
  yao.common.Transaction transaction = 2; // Transaction to simulate
  ExecutionContext context = 3;       // Simulation context
  SimulationOptions options = 4;      // Simulation options
}

// SimulationOptions configures transaction simulation
message SimulationOptions {
  bool estimate_gas = 1;              // Whether to estimate gas usage
  bool trace_calls = 2;               // Whether to trace internal calls
  bool override_state = 3;            // Whether to allow state overrides
  map<string, AccountOverride> state_overrides = 4; // State override values
}

// AccountOverride allows overriding account state for simulation
message AccountOverride {
  string balance = 1;                 // Override balance
  uint64 nonce = 2;                   // Override nonce
  bytes code = 3;                     // Override contract code
  map<string, string> state = 4;      // Override storage slots
}

// SimulateTransactionResponse returns simulation result
message SimulateTransactionResponse {
  yao.common.ResponseMetadata metadata = 1;
  SimulationResult result = 2;        // Simulation result
}

// SimulationResult contains transaction simulation results
message SimulationResult {
  bool success = 1;                   // Whether simulation succeeded
  string error = 2;                   // Error message if simulation failed
  uint64 gas_used = 3;                // Estimated gas usage
  bytes return_data = 4;              // Return data from simulation
  repeated yao.common.Log logs = 5;   // Logs that would be generated
  repeated CallTrace call_traces = 6; // Internal call traces (if requested)
}

// CallTrace represents an internal call during execution
message CallTrace {
  string type = 1;                    // Call type (CALL, DELEGATECALL, etc.)
  string from = 2;                    // Caller address
  string to = 3;                      // Callee address
  string value = 4;                   // Value transferred
  uint64 gas = 5;                     // Gas allocated
  uint64 gas_used = 6;                // Gas actually used
  bytes input = 7;                    // Call input data
  bytes output = 8;                   // Call output data
  string error = 9;                   // Error message if call failed
  repeated CallTrace calls = 10;      // Nested calls
}

// GetExecutionStatusRequest requests execution engine status
message GetExecutionStatusRequest {
  yao.common.RequestMetadata metadata = 1;
}

// GetExecutionStatusResponse returns execution engine status
message GetExecutionStatusResponse {
  yao.common.ResponseMetadata metadata = 1;
  ExecutionEngineStatus status = 2;   // Execution engine status
}

// ExecutionEngineStatus represents the current state of the execution engine
message ExecutionEngineStatus {
  bool is_healthy = 1;                // Whether execution engine is healthy
  ExecutionEngineState state = 2;     // Current engine state
  uint64 blocks_processed = 3;        // Total blocks processed
  uint64 transactions_processed = 4;  // Total transactions processed
  double avg_block_time_ms = 5;       // Average block execution time
  double avg_tx_time_ms = 6;          // Average transaction execution time
  CacheStatus cache_status = 7;       // Cache status information
}

// ExecutionEngineState represents different execution engine states
enum ExecutionEngineState {
  INITIALIZING = 0;                   // Engine is initializing
  READY = 1;                          // Engine is ready to process
  PROCESSING = 2;                     // Engine is processing blocks/transactions
  MAINTENANCE = 3;                    // Engine is in maintenance mode
  ERROR = 4;                          // Engine is in error state
}

// CacheStatus provides information about cache performance
message CacheStatus {
  uint64 cache_size = 1;              // Current cache size in bytes
  uint64 cache_capacity = 2;          // Maximum cache capacity in bytes
  double utilization = 3;             // Cache utilization ratio (0.0-1.0)
  uint64 hit_count = 4;               // Total cache hits
  uint64 miss_count = 5;              // Total cache misses
  double hit_ratio = 6;               // Cache hit ratio (0.0-1.0)
}

// GetExecutionMetricsRequest requests execution metrics
message GetExecutionMetricsRequest {
  yao.common.RequestMetadata metadata = 1;
  uint64 time_range_seconds = 2;      // Time range for metrics (0 for all time)
}

// GetExecutionMetricsResponse returns execution metrics
message GetExecutionMetricsResponse {
  yao.common.ResponseMetadata metadata = 1;
  ExecutionMetrics metrics = 2;       // Execution metrics
}

// ExecutionMetrics contains detailed execution performance metrics
message ExecutionMetrics {
  uint64 total_blocks = 1;            // Total blocks executed
  uint64 successful_blocks = 2;       // Successfully executed blocks
  uint64 failed_blocks = 3;           // Failed block executions
  uint64 total_transactions = 4;      // Total transactions executed
  uint64 successful_transactions = 5; // Successfully executed transactions
  uint64 failed_transactions = 6;     // Failed transaction executions
  double avg_block_execution_time_ms = 7; // Average block execution time
  double avg_tx_execution_time_ms = 8;    // Average transaction execution time
  uint64 total_gas_used = 9;          // Total gas consumed
  double gas_usage_rate = 10;         // Gas usage per second
  map<string, uint64> error_counts = 11;  // Error counts by type
}

// WatchExecutionRequest requests execution event subscription
message WatchExecutionRequest {
  yao.common.RequestMetadata metadata = 1;
  repeated ExecutionEventType event_types = 2; // Specific event types to watch
}

// ExecutionEvent represents execution-related events
message ExecutionEvent {
  string subscription_id = 1;         // Unique subscription identifier
  ExecutionEventType type = 2;        // Event type
  uint64 timestamp = 3;               // Unix timestamp of event
  oneof event_data {
    BlockExecutionEvent block_event = 4;
    TransactionExecutionEvent tx_event = 5;
    CacheEvent cache_event = 6;
  }
}

// ExecutionEventType represents different execution event types
enum ExecutionEventType {
  BLOCK_EXECUTION_STARTED = 0;        // Block execution started
  BLOCK_EXECUTION_COMPLETED = 1;      // Block execution completed
  BLOCK_EXECUTION_FAILED = 2;         // Block execution failed
  TRANSACTION_EXECUTED = 3;           // Transaction executed
  CACHE_INVALIDATED = 4;              // Cache invalidated
  EXECUTION_ERROR = 5;                // Execution error occurred
}

// BlockExecutionEvent contains block execution event data
message BlockExecutionEvent {
  uint64 block_number = 1;            // Block number
  string block_hash = 2;              // Block hash
  uint64 execution_time_ms = 3;       // Execution time in milliseconds
  uint64 gas_used = 4;                // Gas used in block
  uint32 transaction_count = 5;       // Number of transactions
  string error = 6;                   // Error message (for failed events)
}

// TransactionExecutionEvent contains transaction execution event data
message TransactionExecutionEvent {
  string transaction_hash = 1;        // Transaction hash
  uint64 gas_used = 2;                // Gas used
  bool success = 3;                   // Whether execution succeeded
  string error = 4;                   // Error message if failed
}

// CacheEvent contains cache-related event data
message CacheEvent {
  CacheEventType type = 1;            // Cache event type
  uint64 affected_keys = 2;           // Number of affected cache keys
  string reason = 3;                  // Reason for cache event
}

// CacheEventType represents different cache event types
enum CacheEventType {
  CACHE_HIT = 0;                      // Cache hit occurred
  CACHE_MISS = 1;                     // Cache miss occurred
  CACHE_EVICTION = 2;                 // Cache eviction occurred
  CACHE_INVALIDATION = 3;             // Cache invalidation occurred
} 